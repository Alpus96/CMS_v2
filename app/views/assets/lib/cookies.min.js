class Cookies{constructor(duration){this.duration=this.assertDuration(duration);this.read('');}assertDuration(duration){if(typeof duration!='number'){const parsed=!isNaN(duration)?parseInt(duration):false;if(parsed===false){throw new Error('Invalid duration; The duration should be in Number of milliseconds. (Is '+typeof duration+')');}return parsed;}return duration;}expireStamp(duration=this.duration){duration=this.assertDuration(duration);const date=new Date();date.setTime(date.getTime()+duration);return date.toUTCString();}expired(name){if(typeof this.cache[name]==='undefined'){return;}delete this.cache[name];}create(name,value,duration=this.duration){duration=this.assertDuration(duration);const expires=setTimeout(()=>{this.expired(name);},duration);document.cookie=name+'='+JSON.stringify(value?{value:value,expires:expires}:'')+'; expires='+this.expireStamp(duration)+'; path=/';this.cache[name]={value:value,expires:expires};}read(name){if(this.cache&&typeof this.cache[name]!=='undefined'&&typeof this.cache[name].expires!=='undefined'){return this.cache[name].value;}const cookies=document.cookie.split('; ');this.cache={};for(let i=cookies.length-1;i>=0;i--){const[cookieName,cookieJSON]=cookies[i].split('=');const cookieValue=typeof cookieJSON!=='undefined'&&cookieJSON!=='undefined'&&cookieJSON?JSON.parse(cookieJSON):null;this.cache[cookieName]=cookieValue;}return this.cache[name]?this.cache[name].value:null;}extendDuration(name,duration){duration=this.assertDuration(duration);if(typeof this.cache[name]==='undefined'){throw new Error('Can not extend duration of undefined.');}const oldCookie=this.cache[name];clearTimeout(oldCookie.expires);this.create(name,oldCookie.value,duration?duration:this.duration);}delete(name){if(typeof this.cache[name]==='undefined'){return;}this.create(name,'',-1);delete this.cache[name];}}